Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"NullableNotNullManager\">\r\n    <option name=\"myDefaultNullable\" value=\"androidx.annotation.Nullable\" />\r\n    <option name=\"myDefaultNotNull\" value=\"androidx.annotation.NonNull\" />\r\n    <option name=\"myNullables\">\r\n      <value>\r\n        <list size=\"16\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.Nullable\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nullable\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"javax.annotation.CheckForNull\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.Nullable\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.Nullable\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.Nullable\" />\r\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNullable\" />\r\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"android.annotation.Nullable\" />\r\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.Nullable\" />\r\n          <item index=\"9\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableDecl\" />\r\n          <item index=\"10\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableType\" />\r\n          <item index=\"11\" class=\"java.lang.String\" itemvalue=\"com.android.annotations.Nullable\" />\r\n          <item index=\"12\" class=\"java.lang.String\" itemvalue=\"org.eclipse.jdt.annotation.Nullable\" />\r\n          <item index=\"13\" class=\"java.lang.String\" itemvalue=\"io.reactivex.annotations.Nullable\" />\r\n          <item index=\"14\" class=\"java.lang.String\" itemvalue=\"io.reactivex.rxjava3.annotations.Nullable\" />\r\n          <item index=\"15\" class=\"java.lang.String\" itemvalue=\"org.jspecify.nullness.Nullable\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n    <option name=\"myNotNulls\">\r\n      <value>\r\n        <list size=\"15\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.NotNull\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nonnull\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.NonNull\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.NonNull\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.NonNull\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNonNull\" />\r\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"android.annotation.NonNull\" />\r\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.NonNull\" />\r\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullDecl\" />\r\n          <item index=\"9\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullType\" />\r\n          <item index=\"10\" class=\"java.lang.String\" itemvalue=\"com.android.annotations.NonNull\" />\r\n          <item index=\"11\" class=\"java.lang.String\" itemvalue=\"org.eclipse.jdt.annotation.NonNull\" />\r\n          <item index=\"12\" class=\"java.lang.String\" itemvalue=\"io.reactivex.annotations.NonNull\" />\r\n          <item index=\"13\" class=\"java.lang.String\" itemvalue=\"io.reactivex.rxjava3.annotations.NonNull\" />\r\n          <item index=\"14\" class=\"java.lang.String\" itemvalue=\"org.jspecify.nullness.NonNull\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" project-jdk-name=\"jbr-17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -47,7 +47,7 @@
       </value>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: usbSerialExamples/src/main/java/com/hoho/android/usbserial/examples/TerminalFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hoho.android.usbserial.examples;\r\n\r\nimport android.app.PendingIntent;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.hardware.usb.UsbDevice;\r\nimport android.hardware.usb.UsbDeviceConnection;\r\nimport android.hardware.usb.UsbManager;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Looper;\r\nimport android.text.SpannableStringBuilder;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\nimport android.widget.ToggleButton;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.widget.NestedScrollView;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.hoho.android.usbserial.GolfzonLogger;\r\nimport com.hoho.android.usbserial.core.DongleManager;\r\nimport com.hoho.android.usbserial.core.DongleNoti;\r\nimport com.hoho.android.usbserial.core.DongleState;\r\nimport com.hoho.android.usbserial.core.SerialDataListener;\r\nimport com.hoho.android.usbserial.driver.UsbSerialDriver;\r\nimport com.hoho.android.usbserial.driver.UsbSerialPort;\r\nimport com.hoho.android.usbserial.driver.UsbSerialProber;\r\nimport com.hoho.android.usbserial.examples.widget.PerfectScrollableTextView;\r\nimport com.hoho.android.usbserial.util.HexDump;\r\nimport com.hoho.android.usbserial.util.SerialInputOutputManager;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.charset.Charset;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.EnumSet;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\nimport co.golfzon.visionHome.HGSNoti;\r\nimport co.golfzon.visionHome.HGSSensorListener;\r\nimport co.golfzon.visionHome.SwingInfoGyro;\r\nimport co.golfzon.visionHome.core.interfaces.HGS_Client;\r\nimport co.golfzon.visionHome.util.Converter;\r\n\r\n\r\npublic class TerminalFragment extends Fragment implements SerialInputOutputManager.Listener {\r\n\r\n    private enum UsbPermission {Unknown, Requested, Granted, Denied}\r\n\r\n    private static final String INTENT_ACTION_GRANT_USB = BuildConfig.APPLICATION_ID + \".GRANT_USB\";\r\n    private static final int WRITE_WAIT_MILLIS = 2000;\r\n    private static final int READ_WAIT_MILLIS = 2000;\r\n\r\n    private int deviceId, portNum, baudRate;\r\n    private boolean withIoManager;\r\n\r\n    private final BroadcastReceiver broadcastReceiver;\r\n    private final Handler mainLooper;\r\n    private PerfectScrollableTextView receiveText;\r\n    private ControlLines controlLines;\r\n\r\n    private Button initButton;\r\n    private Button sensingButton;\r\n\r\n    private Button bleDisconnectButton;\r\n\r\n    private Button sensingStopButton;\r\n\r\n    private Button bleScanButton;\r\n\r\n    private Button activeVibration;\r\n\r\n    private NestedScrollView logScrollView;\r\n\r\n    private SerialInputOutputManager usbIoManager;\r\n    private UsbSerialPort usbSerialPort;\r\n    private UsbPermission usbPermission = UsbPermission.Unknown;\r\n    private boolean connected = false;\r\n\r\n    private DongleManager dongleManager;\r\n\r\n\r\n    private HGS_Client hgsClient;\r\n\r\n    private ExecutorService singpool;\r\n\r\n    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"HH:mm:ss:SSS\");\r\n\r\n    private final String SEPARATOR = \"\\r\\n\";\r\n\r\n\r\n    public TerminalFragment() {\r\n        broadcastReceiver = new BroadcastReceiver() {\r\n            @Override\r\n            public void onReceive(Context context, Intent intent) {\r\n                if (INTENT_ACTION_GRANT_USB.equals(intent.getAction())) {\r\n                    usbPermission = intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)\r\n                            ? UsbPermission.Granted : UsbPermission.Denied;\r\n                    connect();\r\n                }\r\n            }\r\n        };\r\n        mainLooper = new Handler(Looper.getMainLooper());\r\n\r\n    }\r\n\r\n    /*\r\n     * Lifecycle\r\n     */\r\n    @Override\r\n    public void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setHasOptionsMenu(true);\r\n        setRetainInstance(true);\r\n        deviceId = getArguments().getInt(\"device\");\r\n        portNum = getArguments().getInt(\"port\");\r\n        baudRate = getArguments().getInt(\"baud\");\r\n        withIoManager = getArguments().getBoolean(\"withIoManager\");\r\n\r\n\r\n        GolfzonLogger.i(\":::::::Terminal.... create\");\r\n\r\n\r\n        hgsClient = ServiceLocator.get(HGS_Client.class);\r\n        dongleManager = ServiceLocator.get(DongleManager.class);\r\n\r\n        dongleManager.init();\r\n        dongleManager.getResponseManager().setSerialDataListener(new SerialDataListener() {\r\n            @Override\r\n            public void onResult(byte[] raw) {\r\n                singpool.execute(() -> hgsClient.HGSComputeData(raw));\r\n            }\r\n\r\n            @Override\r\n            public void onDongleState(DongleNoti state) {\r\n                writeLogMessage(state.name());\r\n            }\r\n        });\r\n        singpool = Executors.newSingleThreadExecutor();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        getActivity().registerReceiver(broadcastReceiver, new IntentFilter(INTENT_ACTION_GRANT_USB));\r\n\r\n        if (usbPermission == UsbPermission.Unknown || usbPermission == UsbPermission.Granted)\r\n            mainLooper.post(this::connect);\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        if (connected) {\r\n            status(\"USB Port Close\");\r\n            disconnect();\r\n        }\r\n        getActivity().unregisterReceiver(broadcastReceiver);\r\n        super.onPause();\r\n    }\r\n\r\n\r\n\r\n    /*\r\n     * UI\r\n     */\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        View view = inflater.inflate(R.layout.fragment_terminal, container, false);\r\n        receiveText = view.findViewById(R.id.txt_read);                          // TextView performance decreases with number of spans\r\n        receiveText.setTextColor(getResources().getColor(R.color.colorRecieveText)); // set as default color to reduce number of spans\r\n\r\n\r\n        TextView sendText = view.findViewById(R.id.send_text);\r\n        View sendBtn = view.findViewById(R.id.send_btn);\r\n        sendBtn.setOnClickListener(v -> send(sendText.getText().toString()));\r\n        View receiveBtn = view.findViewById(R.id.receive_btn);\r\n        controlLines = new ControlLines(view);\r\n        if (withIoManager) {\r\n            receiveBtn.setVisibility(View.GONE);\r\n        } else {\r\n            receiveBtn.setOnClickListener(v -> read());\r\n        }\r\n\r\n        initButton = view.findViewById(R.id.btn_init);\r\n        sensingButton = view.findViewById(R.id.btn_sensing);\r\n        sensingStopButton = view.findViewById(R.id.btn_sensing_stop);\r\n        bleScanButton = view.findViewById(R.id.btn_at_mode);\r\n        bleDisconnectButton = view.findViewById(R.id.btn_disconnect);\r\n        activeVibration = view.findViewById(R.id.btn_vibration);\r\n        logScrollView = view.findViewById(R.id.scroller);\r\n\r\n        initButton.setVisibility(hgsClient.isSensorConnected() ? View.GONE : View.VISIBLE);\r\n\r\n        return view;\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        GolfzonLogger.i(\"::::::::TerminalFragment>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\r\n\r\n\r\n        bleScanButton.setOnClickListener(v -> dongleManager.setAtMode());\r\n\r\n        initButton.setOnClickListener(v -> {\r\n            if(!hgsClient.isSensorConnected()){\r\n                hgsClient.HGSInitSensor();\r\n            }\r\n        });\r\n\r\n        activeVibration.setOnClickListener(v -> send(\"#pg\"));\r\n\r\n        bleDisconnectButton.setOnClickListener(v -> dongleManager.setDisconnect());\r\n\r\n        sensingButton.setOnClickListener(v -> {\r\n            if (!hgsClient.isSensing()) {\r\n                hgsClient.HGSSensingStart();\r\n            }\r\n        });\r\n\r\n        sensingStopButton.setOnClickListener(v -> {\r\n            if (hgsClient.isSensing()) {\r\n                hgsClient.HGSSensingStop();\r\n            }\r\n        });\r\n\r\n        hgsClient.setHSGSSensorListener(new HGSSensorListener() {\r\n            @Override\r\n            public void onSendDeviceCmd(@NonNull String s) {\r\n                send(s);\r\n            }\r\n\r\n            @Override\r\n            public void onReceiveData(@NonNull SwingInfoGyro swingInfoGyro) {\r\n                writeLogMessage(swingInfoGyro.toString());\r\n            }\r\n\r\n            @Override\r\n            public void onReceiveEvent(@NonNull HGSNoti hgsNoti) {\r\n                writeLogMessage(hgsNoti.toString());\r\n\r\n                switch (hgsNoti) {\r\n                    case NOTI_SENSOR_MONITORING_START:\r\n                        dongleManager.setDongleState(DongleState.DATA_GATHERING);\r\n                        break;\r\n                    case NOTI_SENSOR_MONITORING_STOP:\r\n                        dongleManager.setDongleState(DongleState.CONNECT);\r\n                        break;\r\n                    case NOTI_GYRO_DISCONNECTED_ERROR:\r\n                        dongleManager.setDongleState(DongleState.DISCONNECT);\r\n                        break;\r\n                    case NOTI_SENSOR_DISCONNECTED:\r\n                        disposeUsbSerial();\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onCreateOptionsMenu(@NonNull Menu menu, MenuInflater inflater) {\r\n        inflater.inflate(R.menu.menu_terminal, menu);\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        int id = item.getItemId();\r\n        if (id == R.id.clear) {\r\n            receiveText.setText(\"\");\r\n            return true;\r\n        } else if (id == R.id.send_break) {\r\n            if (!connected) {\r\n                Toast.makeText(getActivity(), \"not connected\", Toast.LENGTH_SHORT).show();\r\n            } else {\r\n                try {\r\n                    usbSerialPort.setBreak(true);\r\n                    Thread.sleep(100); // should show progress bar instead of blocking UI thread\r\n                    usbSerialPort.setBreak(false);\r\n                    writeLogMessage(\"send <break>\");\r\n                } catch (UnsupportedOperationException ignored) {\r\n                    Toast.makeText(getActivity(), \"BREAK not supported\", Toast.LENGTH_SHORT).show();\r\n                } catch (Exception e) {\r\n                    Toast.makeText(getActivity(), \"BREAK failed: \" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            return super.onOptionsItemSelected(item);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Serial\r\n     */\r\n    @Override\r\n    public void onNewData(byte[] data) {\r\n        try {\r\n            String packet = Converter.ByteArrayToHexString(data);\r\n            writeLogMessage(packet);\r\n        } catch (Exception e) {\r\n            GolfzonLogger.e(\":::e \" + e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onRunError(Exception e) {\r\n        mainLooper.post(() -> {\r\n            status(\"connection lost: \" + e.getMessage());\r\n            disconnect();\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Serial + UI\r\n     */\r\n    private void connect() {\r\n        GolfzonLogger.i(\":::::::::::::usb connect call\");\r\n        UsbDevice device = null;\r\n        UsbManager usbManager = (UsbManager) getActivity().getSystemService(Context.USB_SERVICE);\r\n        for (UsbDevice v : usbManager.getDeviceList().values()){\r\n            GolfzonLogger.i(\":::v \" + v.getDeviceName()  + \" || \" + v.getDeviceId());\r\n            device = v;\r\n            break;\r\n        }\r\n\r\n        if (device == null) {\r\n            status(\"connection failed: device not found\");\r\n            return;\r\n        }\r\n        UsbSerialDriver driver = UsbSerialProber.getDefaultProber().probeDevice(device);\r\n        if (driver == null) {\r\n            driver = CustomProber.getCustomProber().probeDevice(device);\r\n        }\r\n        if (driver == null) {\r\n            status(\"connection failed: no driver for device\");\r\n            return;\r\n        }\r\n        if (driver.getPorts().size() < portNum) {\r\n            status(\"connection failed: not enough ports at device\");\r\n            return;\r\n        }\r\n        usbSerialPort = driver.getPorts().get(portNum);\r\n        UsbDeviceConnection usbConnection = usbManager.openDevice(driver.getDevice());\r\n        if (usbConnection == null && usbPermission == UsbPermission.Unknown && !usbManager.hasPermission(driver.getDevice())) {\r\n            usbPermission = UsbPermission.Requested;\r\n            int flags = Build.VERSION.SDK_INT >= Build.VERSION_CODES.M ? PendingIntent.FLAG_MUTABLE : 0;\r\n            PendingIntent usbPermissionIntent = PendingIntent.getBroadcast(getActivity(), 0, new Intent(INTENT_ACTION_GRANT_USB), flags);\r\n            usbManager.requestPermission(driver.getDevice(), usbPermissionIntent);\r\n            return;\r\n        }\r\n        if (usbConnection == null) {\r\n            if (!usbManager.hasPermission(driver.getDevice()))\r\n                status(\"connection failed: permission denied\");\r\n            else\r\n                status(\"connection failed: open failed\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            usbSerialPort.open(usbConnection);\r\n            try {\r\n                usbSerialPort.setParameters(baudRate, 8, 1, UsbSerialPort.PARITY_NONE);\r\n                usbSerialPort.setRTS(true);\r\n            } catch (UnsupportedOperationException e) {\r\n                status(\"unsupport setparameters\");\r\n            }\r\n            if (withIoManager) {\r\n                usbIoManager = new SerialInputOutputManager(usbSerialPort, dongleManager.getResponseManager());\r\n                usbIoManager.start();\r\n            }\r\n            status(\"USB Port Open\");\r\n            connected = true;\r\n            controlLines.start();\r\n\r\n            dongleManager.setUsbSerialPort(usbSerialPort);\r\n\r\n\r\n        } catch (Exception e) {\r\n            status(\"connection failed: \" + e.getMessage());\r\n            disconnect();\r\n        }\r\n    }\r\n\r\n    private void disposeUsbSerial(){\r\n        connected = false;\r\n        controlLines.stop();\r\n        if (usbIoManager != null) {\r\n            usbIoManager.setListener(null);\r\n            usbIoManager.stop();\r\n        }\r\n        usbIoManager = null;\r\n        try {\r\n            usbSerialPort.close();\r\n        } catch (IOException ignored) {\r\n        }\r\n        usbSerialPort = null;\r\n        dongleManager.setUsbSerialPort(null);\r\n        dongleManager.getRequestThread().closeAll();\r\n        dongleManager.getRequestThread().closeAll();\r\n    }\r\n    private void disconnect() {\r\n        hgsClient.HGSSensingStop();\r\n        hgsClient.HGSRelease();\r\n        dongleManager.setDongleState(DongleState.DISCONNECT);\r\n    }\r\n\r\n    private void send(String str) {\r\n        if (!connected) {\r\n            Toast.makeText(getActivity(), \"not connected\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        try {\r\n//            writeLogMessage(str);\r\n            String sendPacket = str + SEPARATOR;\r\n            usbSerialPort.write(sendPacket.getBytes(Charset.defaultCharset()), WRITE_WAIT_MILLIS);\r\n        } catch (Exception e) {\r\n            onRunError(e);\r\n        }\r\n    }\r\n\r\n    private void read() {\r\n        if (!connected) {\r\n            Toast.makeText(getActivity(), \"not connected\", Toast.LENGTH_SHORT).show();\r\n            return;\r\n        }\r\n        try {\r\n            byte[] buffer = new byte[8192];\r\n            int len = usbSerialPort.read(buffer, READ_WAIT_MILLIS);\r\n            receive(Arrays.copyOf(buffer, len));\r\n        } catch (IOException e) {\r\n            // when using read with timeout, USB bulkTransfer returns -1 on timeout _and_ errors\r\n            // like connection loss, so there is typically no exception thrown here on error\r\n            status(\"connection lost: \" + e.getMessage());\r\n            disconnect();\r\n        }\r\n    }\r\n\r\n\r\n    private void writeLogMessage(String log) {\r\n        mainLooper.post(() -> {\r\n\r\n            String date = dateFormat.format(System.currentTimeMillis());\r\n            receiveText.append(\"[\" + date + \"] \" + log + \"\\n\");\r\n            if (receiveText.getMeasuredHeight() - logScrollView.getScrollY() <= logScrollView.getHeight() + receiveText.getLineHeight()) {\r\n                logScrollView.post(() -> logScrollView.scrollTo(0, receiveText.getBottom()));\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void receive(byte[] data) {\r\n        SpannableStringBuilder spn = new SpannableStringBuilder();\r\n        spn.append(\"receive \" + data.length + \" bytes\\n\");\r\n        if (data.length > 0)\r\n            spn.append(HexDump.dumpHexString(data)).append(\"\\n\");\r\n        Converter.ByteArrayToHexString(data);\r\n        receiveText.append(spn);\r\n    }\r\n\r\n    void status(String str) {\r\n        writeLogMessage(str);\r\n    }\r\n\r\n    class ControlLines {\r\n        private static final int refreshInterval = 200; // msec\r\n\r\n        private final Runnable runnable;\r\n        private final ToggleButton rtsBtn, ctsBtn, dtrBtn, dsrBtn, cdBtn, riBtn;\r\n\r\n        ControlLines(View view) {\r\n            runnable = this::run; // w/o explicit Runnable, a new lambda would be created on each postDelayed, which would not be found again by removeCallbacks\r\n\r\n            rtsBtn = view.findViewById(R.id.controlLineRts);\r\n            ctsBtn = view.findViewById(R.id.controlLineCts);\r\n            dtrBtn = view.findViewById(R.id.controlLineDtr);\r\n            dsrBtn = view.findViewById(R.id.controlLineDsr);\r\n            cdBtn = view.findViewById(R.id.controlLineCd);\r\n            riBtn = view.findViewById(R.id.controlLineRi);\r\n            rtsBtn.setOnClickListener(this::toggle);\r\n            dtrBtn.setOnClickListener(this::toggle);\r\n        }\r\n\r\n        private void toggle(View v) {\r\n            ToggleButton btn = (ToggleButton) v;\r\n            if (!connected) {\r\n                btn.setChecked(!btn.isChecked());\r\n                Toast.makeText(getActivity(), \"not connected\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n            String ctrl = \"\";\r\n            try {\r\n                if (btn.equals(rtsBtn)) {\r\n                    ctrl = \"RTS\";\r\n                    usbSerialPort.setRTS(btn.isChecked());\r\n                }\r\n                if (btn.equals(dtrBtn)) {\r\n                    ctrl = \"DTR\";\r\n                    usbSerialPort.setDTR(btn.isChecked());\r\n                }\r\n            } catch (IOException e) {\r\n                status(\"set\" + ctrl + \"() failed: \" + e.getMessage());\r\n            }\r\n        }\r\n\r\n        private void run() {\r\n            if (!connected)\r\n                return;\r\n            try {\r\n                EnumSet<UsbSerialPort.ControlLine> controlLines = usbSerialPort.getControlLines();\r\n                rtsBtn.setChecked(controlLines.contains(UsbSerialPort.ControlLine.RTS));\r\n                ctsBtn.setChecked(controlLines.contains(UsbSerialPort.ControlLine.CTS));\r\n                dtrBtn.setChecked(controlLines.contains(UsbSerialPort.ControlLine.DTR));\r\n                dsrBtn.setChecked(controlLines.contains(UsbSerialPort.ControlLine.DSR));\r\n                cdBtn.setChecked(controlLines.contains(UsbSerialPort.ControlLine.CD));\r\n                riBtn.setChecked(controlLines.contains(UsbSerialPort.ControlLine.RI));\r\n                mainLooper.postDelayed(runnable, refreshInterval);\r\n            } catch (Exception e) {\r\n                status(\"getControlLines() failed: \" + e.getMessage() + \" -> stopped control line refresh\");\r\n                disconnect();\r\n            }\r\n        }\r\n\r\n        void start() {\r\n            if (!connected)\r\n                return;\r\n            try {\r\n                EnumSet<UsbSerialPort.ControlLine> controlLines = usbSerialPort.getSupportedControlLines();\r\n                if (!controlLines.contains(UsbSerialPort.ControlLine.RTS))\r\n                    rtsBtn.setVisibility(View.INVISIBLE);\r\n                if (!controlLines.contains(UsbSerialPort.ControlLine.CTS))\r\n                    ctsBtn.setVisibility(View.INVISIBLE);\r\n                if (!controlLines.contains(UsbSerialPort.ControlLine.DTR))\r\n                    dtrBtn.setVisibility(View.INVISIBLE);\r\n                if (!controlLines.contains(UsbSerialPort.ControlLine.DSR))\r\n                    dsrBtn.setVisibility(View.INVISIBLE);\r\n                if (!controlLines.contains(UsbSerialPort.ControlLine.CD))\r\n                    cdBtn.setVisibility(View.INVISIBLE);\r\n                if (!controlLines.contains(UsbSerialPort.ControlLine.RI))\r\n                    riBtn.setVisibility(View.INVISIBLE);\r\n                run();\r\n            } catch (Exception e) {\r\n                Toast.makeText(getActivity(), \"getSupportedControlLines() failed: \" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n                rtsBtn.setVisibility(View.INVISIBLE);\r\n                ctsBtn.setVisibility(View.INVISIBLE);\r\n                dtrBtn.setVisibility(View.INVISIBLE);\r\n                dsrBtn.setVisibility(View.INVISIBLE);\r\n                cdBtn.setVisibility(View.INVISIBLE);\r\n                cdBtn.setVisibility(View.INVISIBLE);\r\n                riBtn.setVisibility(View.INVISIBLE);\r\n            }\r\n        }\r\n\r\n        void stop() {\r\n            mainLooper.removeCallbacks(runnable);\r\n            rtsBtn.setChecked(false);\r\n            ctsBtn.setChecked(false);\r\n            dtrBtn.setChecked(false);\r\n            dsrBtn.setChecked(false);\r\n            cdBtn.setChecked(false);\r\n            riBtn.setChecked(false);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/usbSerialExamples/src/main/java/com/hoho/android/usbserial/examples/TerminalFragment.java b/usbSerialExamples/src/main/java/com/hoho/android/usbserial/examples/TerminalFragment.java
--- a/usbSerialExamples/src/main/java/com/hoho/android/usbserial/examples/TerminalFragment.java	
+++ b/usbSerialExamples/src/main/java/com/hoho/android/usbserial/examples/TerminalFragment.java	
@@ -172,7 +172,6 @@
     }
 
 
-
     /*
      * UI
      */
@@ -216,7 +215,7 @@
         bleScanButton.setOnClickListener(v -> dongleManager.setAtMode());
 
         initButton.setOnClickListener(v -> {
-            if(!hgsClient.isSensorConnected()){
+            if (!hgsClient.isSensorConnected()) {
                 hgsClient.HGSInitSensor();
             }
         });
@@ -328,14 +327,14 @@
      * Serial + UI
      */
     private void connect() {
-        GolfzonLogger.i(":::::::::::::usb connect call");
+        GolfzonLogger.i(":::::::::::::USB SERIAL connect Try..");
         UsbDevice device = null;
         UsbManager usbManager = (UsbManager) getActivity().getSystemService(Context.USB_SERVICE);
-        for (UsbDevice v : usbManager.getDeviceList().values()){
-            GolfzonLogger.i(":::v " + v.getDeviceName()  + " || " + v.getDeviceId());
-            device = v;
-            break;
-        }
+
+        for (UsbDevice v : usbManager.getDeviceList().values())
+            if (v.getDeviceId() == deviceId)
+                device = v;
+
 
         if (device == null) {
             status("connection failed: device not found");
@@ -395,7 +394,7 @@
         }
     }
 
-    private void disposeUsbSerial(){
+    private void disposeUsbSerial() {
         connected = false;
         controlLines.stop();
         if (usbIoManager != null) {
@@ -410,8 +409,8 @@
         usbSerialPort = null;
         dongleManager.setUsbSerialPort(null);
         dongleManager.getRequestThread().closeAll();
-        dongleManager.getRequestThread().closeAll();
     }
+
     private void disconnect() {
         hgsClient.HGSSensingStop();
         hgsClient.HGSRelease();
Index: usbSerialExamples/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n\r\n\r\n}\r\n\r\nandroid {\r\n    compileSdkVersion 33\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n\r\n    defaultConfig {\r\n        minSdkVersion 23\r\n        targetSdkVersion 33\r\n        versionCode 1\r\n        versionName \"1.0.0\"\r\n        vectorDrawables.useSupportLibrary = true\r\n\r\n        missingDimensionStrategy 'device', 'anyDevice'\r\n\r\n    }\r\n\r\n    signingConfigs {\r\n        releaseWithProps {\r\n            storeFile file(\"signature/partronwb.jks\")\r\n            storePassword keystore_pass\r\n            keyAlias key_alias\r\n            keyPassword key_pass\r\n        }\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            signingConfig signingConfigs.releaseWithProps\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'\r\n        }\r\n    }\r\n    namespace 'com.hoho.android.usbserial.examples'\r\n\r\n    android.applicationVariants.all { variant ->\r\n        variant.outputs.all {\r\n            def date = new Date();\r\n            def formattedDate = date.format('yyyy-MM-dd')\r\n\r\n            outputFileName = formattedDate+\"-${variant.name}-${variant.applicationId}-${variant.versionName}.apk\"\r\n        }\r\n    }\r\n\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(include: ['*.jar'], dir: 'libs')\r\n    implementation files('libs/hgs_android_sdk_release_1.0.9.jar')\r\n\r\n    implementation project(':usbSerialForAndroid')\r\n    implementation 'androidx.appcompat:appcompat:1.6.1'\r\n    implementation 'com.google.android.material:material:1.9.0'\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/usbSerialExamples/build.gradle b/usbSerialExamples/build.gradle
--- a/usbSerialExamples/build.gradle	
+++ b/usbSerialExamples/build.gradle	
@@ -15,12 +15,16 @@
     defaultConfig {
         minSdkVersion 23
         targetSdkVersion 33
-        versionCode 1
-        versionName "1.0.0"
+        versionCode 2
+        versionName "1.0.1"
         vectorDrawables.useSupportLibrary = true
 
         missingDimensionStrategy 'device', 'anyDevice'
 
+        ndk {
+            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
+        }
+
     }
 
     signingConfigs {
Index: usbSerialExamples/src/main/java/com/hoho/android/usbserial/examples/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hoho.android.usbserial.examples;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.fragment.app.FragmentManager;\r\n\r\nimport com.hoho.android.usbserial.GolfzonLogger;\r\n\r\npublic class MainActivity extends AppCompatActivity implements FragmentManager.OnBackStackChangedListener {\r\n\r\n\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        GolfzonLogger.i(\"::::MainActivity onCreate\");\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n        getSupportFragmentManager().addOnBackStackChangedListener(this);\r\n\r\n        if (savedInstanceState == null)\r\n            getSupportFragmentManager().beginTransaction().add(R.id.fragment, new DevicesFragment(), \"devices\").commit();\r\n        else\r\n            onBackStackChanged();\r\n    }\r\n\r\n    @Override\r\n    public void onBackStackChanged() {\r\n        getSupportActionBar().setDisplayHomeAsUpEnabled(getSupportFragmentManager().getBackStackEntryCount() > 0);\r\n    }\r\n\r\n    @Override\r\n    public boolean onSupportNavigateUp() {\r\n        onBackPressed();\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    protected void onNewIntent(Intent intent) {\r\n        if (\"android.hardware.usb.action.USB_DEVICE_ATTACHED\".equals(intent.getAction())) {\r\n            TerminalFragment terminal = (TerminalFragment) getSupportFragmentManager().findFragmentByTag(\"terminal\");\r\n            if (terminal != null) terminal.status(\"USB device detected\");\r\n        }\r\n        super.onNewIntent(intent);\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/usbSerialExamples/src/main/java/com/hoho/android/usbserial/examples/MainActivity.java b/usbSerialExamples/src/main/java/com/hoho/android/usbserial/examples/MainActivity.java
--- a/usbSerialExamples/src/main/java/com/hoho/android/usbserial/examples/MainActivity.java	
+++ b/usbSerialExamples/src/main/java/com/hoho/android/usbserial/examples/MainActivity.java	
@@ -9,6 +9,8 @@
 
 import com.hoho.android.usbserial.GolfzonLogger;
 
+import co.golfzon.visionHome.core.interfaces.HGS_Client;
+
 public class MainActivity extends AppCompatActivity implements FragmentManager.OnBackStackChangedListener {
 
 
@@ -27,6 +29,7 @@
             getSupportFragmentManager().beginTransaction().add(R.id.fragment, new DevicesFragment(), "devices").commit();
         else
             onBackStackChanged();
+
     }
 
     @Override
